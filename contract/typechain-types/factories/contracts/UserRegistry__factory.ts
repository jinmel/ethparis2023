/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UserRegistry,
  UserRegistryInterface,
} from "../../contracts/UserRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relayerAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "UserRegister",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "isUserExist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
    ],
    name: "userWorldCoinMapping",
    outputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "userWorldCoinReverseMapping",
    outputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060405161030638038061030683398101604081905261002e91610053565b600280546001600160a01b0319166001600160a01b0392909216919091179055610080565b5f60208284031215610063575f80fd5b81516001600160a01b0381168114610079575f80fd5b9392505050565b6102798061008d5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c8063a3b42a171161004d578063a3b42a17146100d2578063e6de5165146100fa578063e9dd872d1461010f575f80fd5b80630255fa1e1461006857806318a7cca8146100a7575b5f80fd5b6100926100763660046101e2565b6001600160a01b03165f90815260016020526040902054151590565b60405190151581526020015b60405180910390f35b6002546100ba906001600160a01b031681565b6040516001600160a01b03909116815260200161009e565b6100ba6100e0366004610202565b5f602081905290815260409020546001600160a01b031681565b61010d610108366004610219565b61013c565b005b61012e61011d3660046101e2565b60016020525f908152604090205481565b60405190815260200161009e565b5f8281526020818152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915580845260018352928190208590558051858152918201929092527f68f099f30875ca9116ed1d5e9084cd0a1d1d6c053be87674548c1e40595a58b9910160405180910390a15050565b80356001600160a01b03811681146101dd575f80fd5b919050565b5f602082840312156101f2575f80fd5b6101fb826101c7565b9392505050565b5f60208284031215610212575f80fd5b5035919050565b5f806040838503121561022a575f80fd5b8235915061023a602084016101c7565b9050925092905056fea26469706673582212202e89356e5f985a6391b1b03c634ca70515574955a0516393b1d0d87aa187e1de64736f6c63430008140033";

type UserRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserRegistry__factory extends ContractFactory {
  constructor(...args: UserRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _relayerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserRegistry> {
    return super.deploy(_relayerAddr, overrides || {}) as Promise<UserRegistry>;
  }
  override getDeployTransaction(
    _relayerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relayerAddr, overrides || {});
  }
  override attach(address: string): UserRegistry {
    return super.attach(address) as UserRegistry;
  }
  override connect(signer: Signer): UserRegistry__factory {
    return super.connect(signer) as UserRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserRegistryInterface {
    return new utils.Interface(_abi) as UserRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserRegistry {
    return new Contract(address, _abi, signerOrProvider) as UserRegistry;
  }
}
