/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  UserRegistry,
  UserRegistryInterface,
} from "../../contracts/UserRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_relayerAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "UserRegister",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "isUserExist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "userAddr",
        type: "address",
      },
    ],
    name: "registerUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
    ],
    name: "userWorldCoinMapping",
    outputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "userWorldCoinReverseMapping",
    outputs: [
      {
        internalType: "uint256",
        name: "worldCoinId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060405161060c38038061060c833981810160405281019061003191906100d5565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610100565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a48261007b565b9050919050565b6100b48161009a565b81146100be575f80fd5b50565b5f815190506100cf816100ab565b92915050565b5f602082840312156100ea576100e9610077565b5b5f6100f7848285016100c1565b91505092915050565b6104ff8061010d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80630255fa1e1461005957806318a7cca814610089578063a3b42a17146100a7578063e6de5165146100d7578063e9dd872d146100f3575b5f80fd5b610073600480360381019061006e9190610358565b610123565b604051610080919061039d565b60405180910390f35b61009161016c565b60405161009e91906103c5565b60405180910390f35b6100c160048036038101906100bc9190610411565b610191565b6040516100ce91906103c5565b60405180910390f35b6100f160048036038101906100ec919061043c565b6101c0565b005b61010d60048036038101906101089190610358565b6102e5565b60405161011a9190610489565b60405180910390f35b5f8060015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414159050919050565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f602052805f5260405f205f915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610218575f80fd5b805f808481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055507f68f099f30875ca9116ed1d5e9084cd0a1d1d6c053be87674548c1e40595a58b982826040516102d99291906104a2565b60405180910390a15050565b6001602052805f5260405f205f915090505481565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610327826102fe565b9050919050565b6103378161031d565b8114610341575f80fd5b50565b5f813590506103528161032e565b92915050565b5f6020828403121561036d5761036c6102fa565b5b5f61037a84828501610344565b91505092915050565b5f8115159050919050565b61039781610383565b82525050565b5f6020820190506103b05f83018461038e565b92915050565b6103bf8161031d565b82525050565b5f6020820190506103d85f8301846103b6565b92915050565b5f819050919050565b6103f0816103de565b81146103fa575f80fd5b50565b5f8135905061040b816103e7565b92915050565b5f60208284031215610426576104256102fa565b5b5f610433848285016103fd565b91505092915050565b5f8060408385031215610452576104516102fa565b5b5f61045f858286016103fd565b925050602061047085828601610344565b9150509250929050565b610483816103de565b82525050565b5f60208201905061049c5f83018461047a565b92915050565b5f6040820190506104b55f83018561047a565b6104c260208301846103b6565b939250505056fea26469706673582212203ba24c015fce57769cbd642939cba9dd86bbe8ff76fc46c2864bb083eea63e1564736f6c63430008140033";

type UserRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserRegistry__factory extends ContractFactory {
  constructor(...args: UserRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _relayerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserRegistry> {
    return super.deploy(_relayerAddr, overrides || {}) as Promise<UserRegistry>;
  }
  override getDeployTransaction(
    _relayerAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_relayerAddr, overrides || {});
  }
  override attach(address: string): UserRegistry {
    return super.attach(address) as UserRegistry;
  }
  override connect(signer: Signer): UserRegistry__factory {
    return super.connect(signer) as UserRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserRegistryInterface {
    return new utils.Interface(_abi) as UserRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserRegistry {
    return new Contract(address, _abi, signerOrProvider) as UserRegistry;
  }
}
