/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface UserRegistryInterface extends utils.Interface {
  functions: {
    "isUserExist(address)": FunctionFragment;
    "registerUser(uint256,address)": FunctionFragment;
    "relayerAddress()": FunctionFragment;
    "userWorldCoinMapping(uint256)": FunctionFragment;
    "userWorldCoinReverseMapping(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isUserExist"
      | "registerUser"
      | "relayerAddress"
      | "userWorldCoinMapping"
      | "userWorldCoinReverseMapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isUserExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userWorldCoinMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWorldCoinReverseMapping",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "isUserExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWorldCoinMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWorldCoinReverseMapping",
    data: BytesLike
  ): Result;

  events: {
    "UserRegister(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UserRegister"): EventFragment;
}

export interface UserRegisterEventObject {
  worldCoinId: BigNumber;
  userAddr: string;
}
export type UserRegisterEvent = TypedEvent<
  [BigNumber, string],
  UserRegisterEventObject
>;

export type UserRegisterEventFilter = TypedEventFilter<UserRegisterEvent>;

export interface UserRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isUserExist(
      userAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerUser(
      worldCoinId: PromiseOrValue<BigNumberish>,
      userAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayerAddress(overrides?: CallOverrides): Promise<[string]>;

    userWorldCoinMapping(
      worldCoinId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { userAddress: string }>;

    userWorldCoinReverseMapping(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { worldCoinId: BigNumber }>;
  };

  isUserExist(
    userAddr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerUser(
    worldCoinId: PromiseOrValue<BigNumberish>,
    userAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayerAddress(overrides?: CallOverrides): Promise<string>;

  userWorldCoinMapping(
    worldCoinId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  userWorldCoinReverseMapping(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    isUserExist(
      userAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerUser(
      worldCoinId: PromiseOrValue<BigNumberish>,
      userAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    relayerAddress(overrides?: CallOverrides): Promise<string>;

    userWorldCoinMapping(
      worldCoinId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    userWorldCoinReverseMapping(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "UserRegister(uint256,address)"(
      worldCoinId?: null,
      userAddr?: null
    ): UserRegisterEventFilter;
    UserRegister(worldCoinId?: null, userAddr?: null): UserRegisterEventFilter;
  };

  estimateGas: {
    isUserExist(
      userAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerUser(
      worldCoinId: PromiseOrValue<BigNumberish>,
      userAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    userWorldCoinMapping(
      worldCoinId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWorldCoinReverseMapping(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isUserExist(
      userAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerUser(
      worldCoinId: PromiseOrValue<BigNumberish>,
      userAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userWorldCoinMapping(
      worldCoinId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWorldCoinReverseMapping(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
